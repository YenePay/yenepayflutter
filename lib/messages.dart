// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';

class YenepayPaymentResponse {
  String buyerId;
  String customerCode;
  String customerEmail;
  String customerName;
  String invoiceId;
  String invoiceUrl;
  String merchantCode;
  String merchantId;
  String merchantOrderId;
  String orderCode;
  String paymentOrderId;
  String signature;
  String statusDescription;

  String statusText;
  String verificationString;
  int status;

  double discount;
  double grandTotal;
  double handlingFee;
  double itemsTotal;
  double merchantCommisionFee;
  double shippingFee;
  double tax1;
  double tax2;
  double transactionFee;

  bool isCanceled;
  bool isDelivered;
  bool isExpired;
  bool isPaymentCompleted;
  bool isPending;
  bool isVerifying;
  bool hasOpenDispute;

  static YenepayPaymentResponse decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return YenepayPaymentResponse()
      ..buyerId = pigeonMap['buyerId'] as String
      ..customerCode = pigeonMap['customerCode'] as String
      ..customerEmail = pigeonMap['customerEmail'] as String
      ..customerName = pigeonMap['customerName'] as String
      ..invoiceId = pigeonMap['invoiceId'] as String
      ..invoiceUrl = pigeonMap['invoiceUrl'] as String
      ..merchantCode = pigeonMap['merchantCode'] as String
      ..merchantId = pigeonMap['merchantId'] as String
      ..merchantOrderId = pigeonMap['merchantOrderId'] as String
      ..orderCode = pigeonMap['orderCode'] as String
      ..paymentOrderId = pigeonMap['paymentOrderId'] as String
      ..signature = pigeonMap['signature'] as String
      ..statusDescription = pigeonMap['statusDescription'] as String
      ..statusText = pigeonMap['statusText'] as String
      ..verificationString = pigeonMap['verificationString'] as String
      ..status = pigeonMap['status'] as int
      ..discount = pigeonMap['discount'] as double
      ..grandTotal = pigeonMap['grandTotal'] as double
      ..handlingFee = pigeonMap['handlingFee'] as double
      ..itemsTotal = pigeonMap['itemsTotal'] as double
      ..merchantCommisionFee = pigeonMap['merchantCommisionFee'] as double
      ..shippingFee = pigeonMap['shippingFee'] as double
      ..tax1 = pigeonMap['tax1'] as double
      ..tax2 = pigeonMap['tax2'] as double
      ..transactionFee = pigeonMap['transactionFee'] as double
      ..isCanceled = pigeonMap['isCanceled'] as bool
      ..isDelivered = pigeonMap['isDelivered'] as bool
      ..isExpired = pigeonMap['isExpired'] as bool
      ..isPaymentCompleted = pigeonMap['isPaymentCompleted'] as bool
      ..isPending = pigeonMap['isPending'] as bool
      ..isVerifying = pigeonMap['isVerifying'] as bool
      ..hasOpenDispute = pigeonMap['hasOpenDispute'] as bool;
  }

  @override
  String toString() {
    return 'Yenepay Payment Response is\n' +
        'buyerId: $buyerId ,\n' +
        'customerCode: $customerCode ,\n' +
        'customerEmail: $customerEmail ,\n' +
        'customerName: $customerName ,\n' +
        'invoiceId: $invoiceId ,\n' +
        'invoiceUrl: $invoiceUrl ,\n' +
        'merchantCode: $merchantCode ,\n' +
        'merchantId: $merchantId ,\n' +
        'merchantOrderId: $merchantOrderId ,\n' +
        'orderCode: $orderCode ,\n' +
        'paymentOrderId: $paymentOrderId ,\n' +
        'signature: $signature ,\n' +
        'statusDescription: $statusDescription ,\n' +
        'status: $status ,\n' +
        'statusText: $statusText ,\n' +
        'verificationString: $verificationString ,\n' +
        'discount: $discount ,\n' +
        'grandTotal: $grandTotal ,\n' +
        'handlingFee: $handlingFee ,\n' +
        'itemsTotal: $itemsTotal ,\n' +
        'merchantCommisionFee: $merchantCommisionFee ,\n' +
        'shippingFee: $shippingFee ,\n' +
        'tax1: $tax1 ,\n' +
        'tax2: $tax2 ,\n' +
        'transactionFee: $transactionFee ,\n' +
        'isCanceled: $isCanceled ,\n' +
        'isDelivered: $isDelivered ,\n' +
        'isExpired: $isExpired ,\n' +
        'isPaymentCompleted: $isPaymentCompleted ,\n' +
        'isPending: $isPending ,\n' +
        'isVerifying: $isVerifying ,\n' +
        'hasOpenDispute: $hasOpenDispute ,\n';
  }
}

class YenepayPaymentRequest {
  String merchantCode;
  String merchantOrderId;
  String ipnUrl;
  String returnUrl;
  double tax1;
  double tax2;
  double deliveryFee;
  double handlingFee;
  double discount;
  bool isUseSandboxEnabled;
  List<Object> items;

  // ignore: unused_element
  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['merchantCode'] = merchantCode;
    pigeonMap['merchantOrderId'] = merchantOrderId;
    pigeonMap['ipnUrl'] = ipnUrl;
    pigeonMap['returnUrl'] = returnUrl;
    pigeonMap['tax1'] = tax1;
    pigeonMap['tax2'] = tax2;
    pigeonMap['deliveryFee'] = deliveryFee;
    pigeonMap['handlingFee'] = handlingFee;
    pigeonMap['discount'] = discount;
    pigeonMap['isUseSandboxEnabled'] = isUseSandboxEnabled;
    pigeonMap['items'] = items;
    return pigeonMap;
  }

  // ignore: unused_element
  static YenepayPaymentRequest decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return YenepayPaymentRequest()
      ..merchantCode = pigeonMap['merchantCode'] as String
      ..merchantOrderId = pigeonMap['merchantOrderId'] as String
      ..ipnUrl = pigeonMap['ipnUrl'] as String
      ..returnUrl = pigeonMap['returnUrl'] as String
      ..tax1 = pigeonMap['tax1'] as double
      ..tax2 = pigeonMap['tax2'] as double
      ..deliveryFee = pigeonMap['deliveryFee'] as double
      ..handlingFee = pigeonMap['handlingFee'] as double
      ..discount = pigeonMap['discount'] as double
      ..isUseSandboxEnabled = pigeonMap['isUseSandboxEnabled'] as bool
      ..items = pigeonMap['items'] as List<Object>;
  }
}

class YenePayApi {
  EventChannel channel;

  YenePayApi() {
    channel = EventChannel('com.yenepay.yenepayflutter/response');
  }
  Future<void> requestPayment(YenepayPaymentRequest arg) async {
    final Object encoded = arg.encode();
    MethodChannel channel = MethodChannel('com.yenepay.yenepayflutter/request');
    final Map<Object, Object> replyMap = await channel.invokeMethod(
        "requestPayment", encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error =
          replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

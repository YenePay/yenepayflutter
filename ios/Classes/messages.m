// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface FLTYenepayPaymentRequest ()
+(FLTYenepayPaymentRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FLTYenepayPaymentRequest
+(FLTYenepayPaymentRequest*)fromMap:(NSDictionary*)dict {
  FLTYenepayPaymentRequest* result = [[FLTYenepayPaymentRequest alloc] init];
  result.merchantCode = dict[@"merchantCode"];
  if ((NSNull *)result.merchantCode == [NSNull null]) {
    result.merchantCode = nil;
  }
  result.merchantOrderId = dict[@"merchantOrderId"];
  if ((NSNull *)result.merchantOrderId == [NSNull null]) {
    result.merchantOrderId = nil;
  }
  result.ipnUrl = dict[@"ipnUrl"];
  if ((NSNull *)result.ipnUrl == [NSNull null]) {
    result.ipnUrl = nil;
  }
  result.returnUrl = dict[@"returnUrl"];
  if ((NSNull *)result.returnUrl == [NSNull null]) {
    result.returnUrl = nil;
  }
  result.tax1 = dict[@"tax1"];
  if ((NSNull *)result.tax1 == [NSNull null]) {
    result.tax1 = nil;
  }
  result.tax2 = dict[@"tax2"];
  if ((NSNull *)result.tax2 == [NSNull null]) {
    result.tax2 = nil;
  }
  result.deliveryFee = dict[@"deliveryFee"];
  if ((NSNull *)result.deliveryFee == [NSNull null]) {
    result.deliveryFee = nil;
  }
  result.handlingFee = dict[@"handlingFee"];
  if ((NSNull *)result.handlingFee == [NSNull null]) {
    result.handlingFee = nil;
  }
  result.discount = dict[@"discount"];
  if ((NSNull *)result.discount == [NSNull null]) {
    result.discount = nil;
  }
  result.isUseSandboxEnabled = dict[@"isUseSandboxEnabled"];
  if ((NSNull *)result.isUseSandboxEnabled == [NSNull null]) {
    result.isUseSandboxEnabled = nil;
  }
  result.items = dict[@"items"];
  if ((NSNull *)result.items == [NSNull null]) {
    result.items = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.merchantCode ? self.merchantCode : [NSNull null]), @"merchantCode", (self.merchantOrderId ? self.merchantOrderId : [NSNull null]), @"merchantOrderId", (self.ipnUrl ? self.ipnUrl : [NSNull null]), @"ipnUrl", (self.returnUrl ? self.returnUrl : [NSNull null]), @"returnUrl", (self.tax1 ? self.tax1 : [NSNull null]), @"tax1", (self.tax2 ? self.tax2 : [NSNull null]), @"tax2", (self.deliveryFee ? self.deliveryFee : [NSNull null]), @"deliveryFee", (self.handlingFee ? self.handlingFee : [NSNull null]), @"handlingFee", (self.discount ? self.discount : [NSNull null]), @"discount", (self.isUseSandboxEnabled ? self.isUseSandboxEnabled : [NSNull null]), @"isUseSandboxEnabled", (self.items ? self.items : [NSNull null]), @"items", nil];
}
@end

void FLTYenePayApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTYenePayApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.YenePayApi.requestPayment"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTYenepayPaymentRequest *input = [FLTYenepayPaymentRequest fromMap:message];
        [api requestPayment:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
